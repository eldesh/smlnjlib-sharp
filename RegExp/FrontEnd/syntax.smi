_require "basis.smi"
_require "Util/smlnj-lib.smi"
_require "syntax-sig.sml"

structure RegExpSyntax (* : REGEXP_SYNTAX *) =
struct
    exception CannotParse
    exception CannotCompile

    structure CharSet =
    struct
        structure Key (* : ORD_KEY *) =
        struct
            type ord_key = char
            val compare : ord_key * ord_key -> order
        end
        
        type item = Key.ord_key
        type set (= boxed)
        
        val empty : set
        val singleton : item -> set
        val fromList : item list -> set
        val add  : set * item -> set
        val add' : (item * set) -> set
        val addList : set * item list -> set
        val subtract  : set * item -> set
        val subtract' : (item * set) -> set
        val subtractList : set * item list -> set
        val delete : set * item -> set
        val member : set * item -> bool
        val isEmpty : set -> bool
        val equal : (set * set) -> bool
        val compare : (set * set) -> order
        val isSubset : (set * set) -> bool
        val numItems : set ->  int
        val listItems : set -> item list
        val union : set * set -> set
        val intersection : set * set -> set
        val difference : set * set -> set
        val map : (item -> item) -> set -> set
        val app : (item -> unit) -> set -> unit
        val foldl : (item * 'b -> 'b) -> 'b -> set -> 'b
        val foldr : (item * 'b -> 'b) -> 'b -> set -> 'b
        val partition : (item -> bool) -> set -> (set * set)
        val filter : (item -> bool) -> set -> set
        val exists : (item -> bool) -> set -> bool
        val all : (item -> bool) -> set -> bool
        val find : (item -> bool) -> set -> item option
    end

    datatype syntax
      = Group of syntax
      | Alt of syntax list
      | Concat of syntax list
      | Interval of (syntax * int * int option)
      | Option of syntax  (* == Interval(re, 0, SOME 1) *)
      | Star of syntax    (* == Interval(re, 0, NONE) *)
      | Plus of syntax    (* == Interval(re, 1, NONE) *)
      | MatchSet of CharSet.set
      | NonmatchSet of CharSet.set
      | Char of char
      | Begin                   (* Matches beginning of stream *)
      | End                     (* Matches end of stream *)

    val addRange : CharSet.set * char * char -> CharSet.set
    val allChars : CharSet.set
end

