_require "basis.smi"
_require "match-tree.smi"
_require "FrontEnd/syntax.smi"
_require "FrontEnd/parser-sig.sml"
_require "BackEnd/engine-sig.sml"
_require "regexp-sig.sml"

functor RegExpFn' (
  R : sig
    structure P : (* REGEXP_PARSER *)
    sig
      val scan : (char, 'a) StringCvt.reader
                 -> (RegExpSyntax.syntax, 'a) StringCvt.reader
    end

    structure E : (* REGEXP_ENGINE *)
    sig
      type regexp
      type 'a match = {pos : 'a, len : int} MatchTree.match_tree
      
      val compile : RegExpSyntax.syntax -> regexp
      val find : regexp -> (char,'a) StringCvt.reader -> ('a match, 'a) StringCvt.reader
      
      val prefix : regexp ->(char,'a) StringCvt.reader -> ('a match, 'a) StringCvt.reader
      
      val match : (RegExpSyntax.syntax * ('a match -> 'b)) list
                  -> (char,'a) StringCvt.reader -> ('b, 'a) StringCvt.reader
      end
  end) =
struct
    type regexp = R.E.regexp
	(* the type of a compiled regular expression
	 *)

    (* a match specifies the position (as a stream) and the length of the match *)
    type 'a match = {pos : 'a, len : int} MatchTree.match_tree

    val compile : (char,'a) StringCvt.reader -> (regexp, 'a) StringCvt.reader
	(* read an external representation of a regular expression from a stream 
	 *)

    val compileString : string -> regexp
	(* read an external representation of a regular expression from a string
	 *)

    val find : regexp -> (char,'a) StringCvt.reader -> ('a match, 'a) StringCvt.reader
        (* scan the stream for the first occurence of the regular expression
	 *)

    val prefix : regexp -> (char,'a) StringCvt.reader -> ('a match, 'a) StringCvt.reader
        (* attempt to match the stream at the current position with the 
	 * regular expression
	 *)

    val match : (string * ('a match -> 'b)) list
	  -> (char,'a) StringCvt.reader -> ('b, 'a) StringCvt.reader
        (* attempt to match the stream at the current position with one 
	 * of the external representations of regular expressions and trigger
	 * the corresponding action 
	 *)
end

