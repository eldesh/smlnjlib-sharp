_require "basis.smi"
_require "mono-array-sort-sig.sml"

functor ArrayQSortFn (
    A : sig (* MONO_ARRAY *)
      eqtype array
      type elem
      type vector
      val maxLen : int
      val length : array -> int
      val sub : array * int -> elem
      val foldli : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldl : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldri : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldr : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val appi : (int * elem -> unit) -> array -> unit
      val app : (elem -> unit) -> array -> unit
      val findi : (int * elem -> bool) -> array -> (int * elem) option
      val find : (elem -> bool) -> array -> elem option
      val exists : (elem -> bool) -> array -> bool
      val all : (elem -> bool) -> array -> bool
      val collate : (elem * elem -> order) -> array * array -> order
      val array : int * elem -> array
      val fromList : elem list -> array
      val tabulate : int * (int -> elem) -> array
      val update : array * int * elem -> unit
      val vector : array -> vector
      val copy : {src : array, dst : array, di : int} -> unit
      val copyVec : {src : vector, dst : array, di : int} -> unit
      val modifyi : (int * elem -> elem) -> array -> unit
      val modify : (elem -> elem) -> array -> unit
    end) =
struct
    structure A = struct (* MONO_ARRAY *)
      type array  = A.array
      type elem   = A.elem
      type vector = A.vector
      val maxLen : int
      val length : array -> int
      val sub : array * int -> elem
      val foldli : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldl : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldri : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldr : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val appi : (int * elem -> unit) -> array -> unit
      val app : (elem -> unit) -> array -> unit
      val findi : (int * elem -> bool) -> array -> (int * elem) option
      val find : (elem -> bool) -> array -> elem option
      val exists : (elem -> bool) -> array -> bool
      val all : (elem -> bool) -> array -> bool
      val collate : (elem * elem -> order) -> array * array -> order
      val array : int * elem -> array
      val fromList : elem list -> array
      val tabulate : int * (int -> elem) -> array
      val update : array * int * elem -> unit
      val vector : array -> vector
      val copy : {src : array, dst : array, di : int} -> unit
      val copyVec : {src : vector, dst : array, di : int} -> unit
      val modifyi : (int * elem -> elem) -> array -> unit
      val modify : (elem -> elem) -> array -> unit
    end

    val sort : (A.elem * A.elem -> order) -> A.array -> unit
    val sorted : (A.elem * A.elem -> order) -> A.array -> bool
end

